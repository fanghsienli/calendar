{"version":3,"sources":["components/Styles.tsx","utils/Helpers.ts","utils/Consts.ts","containers/RootContainer.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["Wrapper","styled","div","apiRequest","url","method","bodyParams","a","fetch","headers","Accept","body","JSON","stringify","undefined","response","json","weekMap","0","1","2","3","4","5","6","i18n","RootContainer","React","language","setLanguage","schedules","setSchedules","nextWeekDay","setNextWeekDay","weekDays","setWeekDays","addTimeStamp","setAddTimeStamp","loading","setLoading","firstDay","Date","Number","getDay","weekDayTimeStamp","getFullYear","getMonth","getDate","startedAt","toISOString","unMergedSchedule","available","map","x","status","hh","start","getHours","toString","parse","mm","getMinutes","booked","scheduleIds","schedule","_start","end","moreSchedule","console","log","push","sort","b","getSchedules","_weekDays","Array","_nextWeekDay","i","weekDay","year","month","date","day","filter","className","id","type","onClick","disabled","length","key","j","App","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e7f9ba56.chunk.js","sourcesContent":["import styled from \"styled-components\";\n\nexport const Wrapper = styled.div`\n    padding: 0 10px 32px 10px;\n    min-width: 300px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    & button {\n        background: rgba(255, 255, 255, 1);\n    }\n`;","/**\n * API Request handler\n * @param url - api endpoint\n * @param method - http method\n * @param bodyParams - body parameters of request\n */\nconst cors = \"https://cors-anywhere.herokuapp.com/\";\nexport const apiRequest = async (\n    url: string,\n    method: string,\n    bodyParams?: { email: string; password: string }\n): Promise<any> => {    \n    const response = await fetch(`${cors}${url}`, {\n        method,\n        headers: {\n            Accept: \"application/json\",\n            \"Content-Type\": \"application/json\"\n        }, \n        body: bodyParams ? JSON.stringify(bodyParams) : undefined\n    });\n    return await response.json();\n};\n\n","export const weekMap: {\r\n    [index: number]: { [index: string]: string }\r\n} = {\r\n    0: {\r\n        \"en-US\": \"Sun\",\r\n        \"zh-TW\": \"日\"\r\n    },\r\n    1: {\r\n        \"en-US\": \"Mon\",\r\n        \"zh-TW\": \"一\"\r\n    },\r\n    2: {\r\n        \"en-US\": \"Tue\",\r\n        \"zh-TW\": \"二\"\r\n    },\r\n    3: {\r\n        \"en-US\": \"Wed\",\r\n        \"zh-TW\": \"三\"\r\n    },\r\n    4: {\r\n        \"en-US\": \"Thu\",\r\n        \"zh-TW\": \"四\"\r\n    },\r\n    5: {\r\n        \"en-US\": \"Fri\",\r\n        \"zh-TW\": \"五\"\r\n    },\r\n    6: {\r\n        \"en-US\": \"Sat\",\r\n        \"zh-TW\": \"六\"\r\n    }\r\n}\r\n\r\nexport const i18n: {\r\n    [index: string]: { [index: string]: string }\r\n} = {\r\n    \"sectionTitle\": {\r\n        \"en-US\": \"Available times\",\r\n        \"zh-TW\": \"授課時間\"\r\n    },\r\n    \"timeZomeDescription\": {\r\n        \"en-US\": \"* All the timings listed are in your timezone: Taipei (GMT+08:00)\",\r\n        \"zh-TW\": \"* 時間以 台北 (GMT+08:00) 顯示\"\r\n    }\r\n}\r\n","import * as React from \"react\";\r\nimport { Wrapper } from \"../components/Styles\";\r\nimport { apiRequest } from \"../utils/Helpers\";\r\nimport { weekMap, i18n } from \"../utils/Consts\";\r\n\r\nexport type Schedule = {\r\n    start: string;\r\n    end: string;\r\n    status: string;\r\n    hh: string;\r\n    mm: string;\r\n}\r\n\r\nexport type WeekDay = {\r\n    year: string;\r\n    month: string;\r\n    date: string;\r\n    day: string;\r\n    schedules: Schedule[]\r\n    status: string;\r\n}\r\n\r\n\r\nfunction RootContainer() {\r\n    const [language, setLanguage] = React.useState<string>(\"en-US\");\r\n    const [schedules, setSchedules] = React.useState<Array<Schedule>>([]);\r\n    const [nextWeekDay, setNextWeekDay] = React.useState<string>(\"\");\r\n    const [weekDays, setWeekDays] = React.useState<Array<WeekDay>>([]);\r\n    const [addTimeStamp, setAddTimeStamp] = React.useState<number>(0);\r\n    const [loading, setLoading] = React.useState(false);\r\n\r\n    React.useEffect(() => {\r\n        const getSchedules = async () => {\r\n            setLoading(true);\r\n            let firstDay = new Date(Number(new Date()) - (new Date()).getDay() * 86400000);\r\n            let weekDayTimeStamp = Number(new Date(firstDay.getFullYear(), firstDay.getMonth(), firstDay.getDate())) + addTimeStamp;\r\n            let startedAt = Number(new Date()) > weekDayTimeStamp ? (new Date()).toISOString() : (new Date(weekDayTimeStamp)).toISOString();\r\n            const unMergedSchedule: { available: Array<Schedule>, booked: Array<Schedule> } = await apiRequest(\r\n                `https://api.amazingtalker.com/v1/guest/teachers/amy-estrada/schedule?started_at=${startedAt}`,\r\n                \"get\"\r\n            );\r\n\r\n            let schedules: Array<Schedule> = [\r\n                ...unMergedSchedule.available.map(x => {\r\n                    return {\r\n                        ...x,\r\n                        ...{\r\n                            status: \"available\",\r\n                            hh: (new Date(x.start)).getHours() < 10 ? \"0\" + (new Date(x.start)).getHours().toString() : (new Date(Date.parse(x.start))).getHours().toString(),\r\n                            mm: (new Date(x.start)).getMinutes() < 10 ? \"0\" + (new Date(x.start)).getMinutes().toString() : (new Date(Date.parse(x.start))).getMinutes().toString()\r\n                        }\r\n                    };\r\n                }),\r\n                ...unMergedSchedule.booked.map(x => {\r\n                    return {\r\n                        ...x,\r\n                        ...{\r\n                            status: \"booked\",\r\n                            hh: (new Date(x.start)).getHours() < 10 ? \"0\" + (new Date(x.start)).getHours().toString() : (new Date(Date.parse(x.start))).getHours().toString(),\r\n                            mm: (new Date(x.start)).getMinutes() < 10 ? \"0\" + (new Date(x.start)).getMinutes().toString() : (new Date(Date.parse(x.start))).getMinutes().toString()\r\n                        }\r\n                    };\r\n                })\r\n            ];\r\n\r\n            let scheduleIds: {\r\n                [index: string]: string\r\n            } = {};\r\n            for (let schedule of schedules) {\r\n                let _start = Date.parse(schedule.start);\r\n                if (!scheduleIds[schedule.start]) scheduleIds[schedule.start] = schedule.end;\r\n\r\n                while (Date.parse(schedule.end) - _start > 1800000) {\r\n                    let moreSchedule = { ...schedule };\r\n                    moreSchedule.start = (new Date(_start + 1800000)).toISOString();\r\n                    moreSchedule.hh = (new Date(moreSchedule.start)).getHours() < 10 ? \"0\" + (new Date(moreSchedule.start)).getHours().toString() : (new Date(Date.parse(moreSchedule.start))).getHours().toString();\r\n                    moreSchedule.mm = (new Date(moreSchedule.start)).getMinutes() < 10 ? \"0\" + (new Date(moreSchedule.start)).getMinutes().toString() : (new Date(Date.parse(moreSchedule.start))).getMinutes().toString();\r\n                    console.log(moreSchedule);\r\n                    if (!scheduleIds[moreSchedule.start]) {\r\n                        scheduleIds[moreSchedule.start] = moreSchedule.end;\r\n                        schedules.push(moreSchedule);\r\n                    }\r\n                    _start += 1800000;\r\n                }\r\n            }\r\n            setSchedules(schedules.sort((a, b) => Date.parse(a.start) - Date.parse(b.start)));\r\n            setLoading(false);\r\n        };\r\n        getSchedules();\r\n    }, [addTimeStamp]);\r\n\r\n    React.useEffect(() => {\r\n        let firstDay = new Date(Number(new Date()) - (new Date()).getDay() * 86400000);\r\n        let weekDayTimeStamp = Number(new Date(firstDay.getFullYear(), firstDay.getMonth(), firstDay.getDate())) + addTimeStamp;\r\n\r\n        let _weekDays = new Array<WeekDay>();\r\n        let _nextWeekDay = (new Date(weekDayTimeStamp + 604800000)).getDate() < 10 ? \"0\" + (new Date(weekDayTimeStamp + 604800000)).getDate().toString() : (new Date(weekDayTimeStamp + 604800000)).getDate().toString();\r\n        setNextWeekDay(_nextWeekDay);\r\n        for (let i = 0; i < 7; i++) {\r\n            let weekDay = new Date(weekDayTimeStamp);\r\n            _weekDays.push({\r\n                year: weekDay.getFullYear().toString(),\r\n                month: weekDay.getMonth() + 1 < 10 ? \"0\" + (weekDay.getMonth() + 1).toString() : (weekDay.getMonth() + 1).toString(),\r\n                date: weekDay.getDate() < 10 ? \"0\" + weekDay.getDate().toString() : weekDay.getDate().toString(),\r\n                day: weekMap[weekDay.getDay()][language],\r\n                schedules: schedules\r\n                    .filter(x => Date.parse(x.start) >= weekDayTimeStamp && Date.parse(x.start) < (weekDayTimeStamp + 86400000)),\r\n                status: Number(new Date()) < weekDayTimeStamp ? \"active\" : \"\"\r\n            });\r\n            console.log(schedules\r\n                .filter(x => Date.parse(x.start) >= weekDayTimeStamp && Date.parse(x.start) < (weekDayTimeStamp + 86400000)), _weekDays[i]);\r\n            weekDayTimeStamp += 86400000;\r\n        }\r\n        setWeekDays(_weekDays);\r\n    }, [schedules, language]);\r\n\r\n    return (\r\n        <Wrapper>\r\n            <div className=\"profile-section teacher-schedule with-divider\">\r\n                <div id=\"timeslots\"\r\n                    className=\"teacher-profile-schedule aside-navigation-item\">\r\n                    <h3 className=\"section-title\">\r\n                        <span>{i18n[\"sectionTitle\"][language]}</span>\r\n                        <div className=\"buttion-group\">\r\n                            <div className=\"el-button-group\">\r\n                                <button type=\"button\"\r\n                                    className={`el-button ${language === \"zh-TW\" ? \"active\" : \"\"} el-button--default el-button--mini is-plain`}\r\n                                    onClick={() => setLanguage(\"zh-TW\")}>\r\n                                    中文\r\n                                </button>\r\n                                <button type=\"button\"\r\n                                    className={`el-button ${language === \"en-US\" ? \"active\" : \"\"} el-button--default el-button--mini is-plain`}\r\n                                    onClick={() => setLanguage(\"en-US\")}>\r\n                                    Eng\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n                    </h3>\r\n                    <div className=\"section-body\">\r\n                        <div className=\"schedule\">\r\n                            <div className=\"schedule-control-box at-control\">\r\n                                <div className=\"buttion-group\">\r\n                                    <div className=\"el-button-group\">\r\n                                        <button disabled={addTimeStamp === 0}\r\n                                            type=\"button\"\r\n                                            className={`el-button el-button--default el-button--mini ${addTimeStamp === 0 ? \"is-disabled\" : \"\"} is-plain`}\r\n                                            onClick={() => setAddTimeStamp(addTimeStamp - 604800000)}>\r\n                                            <i className=\"el-icon-arrow-left\">\r\n                                            </i>\r\n                                        </button>\r\n                                        <button type=\"button\"\r\n                                            className=\"el-button el-button--default el-button--mini is-plain\"\r\n                                            onClick={() => setAddTimeStamp(addTimeStamp + 604800000)}>\r\n                                            <i className=\"el-icon-arrow-right\">\r\n                                            </i>\r\n                                        </button>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"label-box\">{weekDays.length === 7 ? weekDays[0].year + \"/\" + weekDays[0].month + \"/\" + weekDays[0].date + \" - \" + nextWeekDay : \"\"}</div>\r\n                                <div className=\"time-zone-description\">\r\n                                    <span>{i18n[\"timeZomeDescription\"][language]}</span>\r\n                                </div>\r\n                            </div>\r\n                            {loading ? <div className=\"loading\" >loading...</div> : <div className=\"at-column-box\">\r\n                                {weekDays.map(({ day, date, status, schedules }: WeekDay, i: number) => {\r\n                                    return (\r\n                                        <div className=\"root\" key={i}>\r\n                                            <div className={`column-container ${status} disable_click`}>\r\n                                                <div className=\"title-box\">\r\n                                                    <div className=\"at-text-center\">{day}</div>\r\n                                                    <div className=\"at-text-center\">{date}</div>\r\n                                                </div>\r\n                                                <div className=\"time-box\">\r\n                                                    {schedules.map(({ hh, mm, status }: Schedule, j: number) => {\r\n                                                        return (\r\n                                                            <div className=\"time-list\" key={j}>\r\n                                                                <div className={`time at-text-center is-size-7 ${status}`}>{hh}:{mm}</div>\r\n                                                            </div>\r\n                                                        );\r\n                                                    })}\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n                                    );\r\n                                })}\r\n                            </div>}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </Wrapper>\r\n    );\r\n}\r\n\r\nexport default RootContainer;\r\n","import * as React from \"react\";\r\n\r\nimport RootContainer from \"./containers/RootContainer\";\r\n\r\nfunction App() {\r\n    return (\r\n        <RootContainer />\r\n    );\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"./index.css\";\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}